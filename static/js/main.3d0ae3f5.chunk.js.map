{"version":3,"sources":["globalStyles.js","assets/adjectiveList.js","assets/nounList.js","components/Logo.js","components/Name.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["theme","Display","styled","div","adjectives","nouns","LogoCont","Title","h1","Logo","NameCont","firstToggle","secondToggle","Text","p","Name","firstLock","secondLock","firstName","secondName","onClick","Position","GenerateBtn","button","Button","generateName","App","useState","setFirstName","setSecondName","setFirstToggle","setSecondToggle","randomAdjectives","sort","a","b","Math","random","randomNouns","newAdjective","newNoun","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mcAEO,IAAMA,EACC,uBADDA,EAEF,uBAFEA,EAGI,OAHJA,EAIO,OAJPA,EAKG,OALHA,EAME,UANFA,EAOC,SAPDA,EAQC,OAODC,EAAUC,IAAOC,IAAV,KChBPC,EAAa,CACtB,QACA,SACA,OACA,SACA,OACA,OACA,UACA,UACA,UCTSC,EAAQ,CACjB,MACA,OACA,QACA,MACA,QACA,SACA,MACA,S,qPCLG,IAAMC,EAAWJ,IAAOC,IAAV,KAGRI,EAAQL,IAAOM,GAAV,IACLR,EACMA,EACFA,GAYFS,EARF,WACT,OACI,kBAACH,EAAD,KACI,kBAACC,EAAD,gB,iaCbL,IAAMG,EAAWR,IAAOC,IAAV,KAOA,gBAAGQ,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAAmCD,GAAeC,EAAe,OAAS,UAElFC,EAAOX,IAAOY,EAAV,IACJd,EACMA,EACFA,GAaFe,EARF,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,UAAWC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WAC9C,OACI,kBAACT,EAAD,CAAUU,QAASJ,GAAaC,GAC5B,kBAACJ,EAAD,KAAOK,GAAaC,K,qoBCpBzB,IAAME,EAAWnB,IAAOC,IAAV,KAIRmB,EAAcpB,IAAOqB,OAAV,IAKAvB,EAMIA,GAGfa,EAAOX,IAAOY,EAAV,IACJd,EACMA,EACFA,GAeFwB,EAVA,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACd,OACI,kBAACJ,EAAD,KACI,kBAACC,EAAD,CAAaF,QAASK,GAClB,kBAAC,EAAD,gCCkBDC,EA1CH,WAAO,IAAD,EACkBC,mBAAS,IAD3B,mBACTT,EADS,KACEU,EADF,OAEoBD,mBAAS,IAF7B,mBAETR,EAFS,KAEGU,EAFH,OAGsBF,oBAAS,GAH/B,mBAGThB,EAHS,KAGImB,EAHJ,OAIwBH,oBAAS,GAJjC,mBAITf,EAJS,KAIKmB,EAJL,KA2BhB,OACE,6BACE,kBAAC,EAAD,MAEA,kBAAC9B,EAAD,KACE,kBAAC,EAAD,CAAMe,UAZM,WAChBc,GAAgBnB,IAWgBO,UAAWA,IACvC,kBAAC,EAAD,CAAMD,WAVO,WACjBc,GAAiBnB,IASiBO,WAAYA,KAG5C,kBAAC,EAAD,CAAQM,aA7BS,WACnB,IAAMO,EAAmB5B,EAAW6B,MAAK,SAACC,EAAGC,GAAJ,MAAU,GAAMC,KAAKC,YACxDC,EAAcjC,EAAM4B,MAAK,SAACC,EAAGC,GAAJ,MAAU,GAAMC,KAAKC,YAE9CE,EAAeP,EAAiB,GAChCQ,EAAUF,EAAY,GAEkBV,EAA3CjB,EAAwDO,EAA7BqB,GAEaV,EAAxCjB,EAAsDO,EAAzBqB,QCdhBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3d0ae3f5.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const theme = {\n  headingFont: `\"Comfortaa\", cursive`,\n  bodyFont: `\"Roboto\", sans-serif`,\n  bodyFontColor: \"#FFF\",\n  headingFontColor: \"#FFF\",\n  primaryColor: \"#FFF\",\n  buttonColor: \"#50BDB4\",\n  h1FontSize: \"3.5rem\",\n  h2FontSize: \"2rem\",\n  skinnyWindowSize: \"414px\",\n  tabletSize: \"768px\",\n  smallLaptopSize: \"1024px\",\n  desktopSize: \"1200px\",\n}\n\nexport const Display = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    margin: 5rem auto;\n`\n","\nexport const adjectives = [\n    \"pinky\",\n    \"yellow\",\n    \"blue\",\n    \"lemony\",\n    \"safe\",\n    \"real\",\n    \"praying\",\n    \"spangly\",\n    \"floaty\"\n];","\nexport const nouns = [\n    \"cat\",\n    \"goat\",\n    \"whale\",\n    \"pen\",\n    \"spoon\",\n    \"shrimp\",\n    \"box\",\n    \"paper\"\n];","import React from \"react\";\nimport styled from \"styled-components\";\nimport { theme } from \"../globalStyles\";\n\nexport const LogoCont = styled.div`\n    margin: 1rem;\n`\nexport const Title = styled.h1`\n    color: ${theme.headingFontColor};\n    font-family: ${theme.headingFont};\n    font-size: ${theme.h1FontSize};\n    font-weight: 800;\n`\n\nconst Logo = () => {\n    return (\n        <LogoCont>\n            <Title>minty</Title>\n        </LogoCont>\n    )\n}\n\nexport default Logo;","import React from \"react\";\nimport styled from \"styled-components\";\nimport { theme } from \"../globalStyles\";\n\nexport const NameCont = styled.div`\n    margin: 0.25rem 1rem;\n    cursor: pointer;\n    // border: 1px solid black;\n    // height: 50px;\n    // width: 100px;\n    \n    // background: ${({ firstToggle, secondToggle }) => firstToggle || secondToggle ? \"#000\" : \"none\"}};\n`\nexport const Text = styled.p`\n    color: ${theme.bodyFontColor};\n    font-family: ${theme.bodyFont};\n    font-size: ${theme.h2FontSize};\n    font-weight: 500;\n    text-transform: capitalize;\n`\n\nconst Name = ({ firstLock, secondLock, firstName, secondName }) => {\n    return (\n        <NameCont onClick={firstLock || secondLock}>\n            <Text>{firstName || secondName}</Text>\n        </NameCont>\n    )\n}\n\nexport default Name;","import React from \"react\";\nimport styled from \"styled-components\";\nimport { theme } from \"../globalStyles\";\n\nexport const Position = styled.div`\n    display: flex;\n    justify-content: center;\n`\nexport const GenerateBtn = styled.button`\n    background-color: transparent;\n    cursor: pointer;\n    outline: none;\n    box-shadow: none;\n    border: 3px solid ${theme.primaryColor};\n    border-radius: 20px;\n    padding: 10px 20px;\n\n    :hover {\n        border: transparent;\n        background-color: ${theme.buttonColor};\n    }\n`\nexport const Text = styled.p`\n    color: ${theme.bodyFontColor};\n    font-family: ${theme.bodyFont};\n    font-size: ${theme.h2FontSize};\n    font-weight: 500;\n    text-transform: capitalize;\n`\n\nconst Button = ({ generateName }) => {\n    return (\n        <Position>\n            <GenerateBtn onClick={generateName}>\n                <Text>Generate a new name!</Text>\n            </GenerateBtn>\n        </Position>\n    )\n}\n\nexport default Button;","import React, { useState } from \"react\";\nimport \"./reset.css\";\nimport \"./App.css\";\nimport { Display } from \"./globalStyles\";\nimport { adjectives } from \"./assets/adjectiveList\";\nimport { nouns } from \"./assets/nounList\";\nimport Logo from \"./components/Logo\";\nimport Name from \"./components/Name\";\nimport Button from \"./components/Button\";\n\nconst App = () => {\n  const [firstName, setFirstName] = useState('');\n  const [secondName, setSecondName] = useState('');\n  const [firstToggle, setFirstToggle] = useState(false);\n  const [secondToggle, setSecondToggle] = useState(false);\n\n  // Generate New Name Function\n  const generateName = () => {\n    const randomAdjectives = adjectives.sort((a, b) => 0.5 - Math.random());\n    const randomNouns = nouns.sort((a, b) => 0.5 - Math.random());\n\n    const newAdjective = randomAdjectives[0];\n    const newNoun = randomNouns[0];\n\n    { !firstToggle ? setFirstName(newAdjective) : setFirstName(firstName) }\n\n    { !secondToggle ? setSecondName(newNoun) : setSecondName(secondName) }\n  };\n\n  // Toggle Lock Functions\n  const firstLock = () => {\n    setFirstToggle(!firstToggle);\n  }\n  const secondLock = () => {\n    setSecondToggle(!secondToggle);\n  }\n\n  return (\n    <div>\n      <Logo />\n\n      <Display>\n        <Name firstLock={firstLock} firstName={firstName} />\n        <Name secondLock={secondLock} secondName={secondName} />\n      </Display>\n\n      <Button generateName={generateName} />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}